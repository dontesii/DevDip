pipeline {

    parameters {
        //string(name: 'environment', defaultValue: 'terraform', description: 'Workspace/environment file to use for deployment')
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')

    }


     environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        CLASS           = "GitSCM"
        BRANCH          = "main"
        GIT_CREDENTIALS = "github-ssh-key"
        GIT_URL         = "git@github.com:dontesii/DevDip.git"
    }

   agent  any
    
        tools {
        "org.jenkinsci.plugins.terraform.TerraformInstallation" "terraform10210"
              }
    //    options {
    //            timestamps ()
    //            ansiColor('xterm')
    //        }
   
      stages {
           stage('Notification on Slack Start') {
            steps {
                 slackSend channel: '#testadmon', message: 'Job Start', blocks: [
                    [
                      "type": "section",
                      "text": [
                        "type": "mrkdwn",
                        "text": "*Запущен процесс создания инфраструктуры*"
                      ]
                    ],
                    [
                      "type": "section",
                      "text": [
                        "type": "mrkdwn",
                        "text": "Создаем Load Balancer, Target Group, create Launch Template and ASG"
                      ]
                     ]
                    ]
               }
             }
          stage('Checkout SCM') {
            steps {
                checkout([
                    $class: "${CLASS}",
                    branches: [[name: "${BRANCH}"]],
                    userRemoteConfigs: [[
                        url: "${GIT_URL}",
                        credentialsId: "${GIT_CREDENTIALS}",
                    ]]
                ])
            }
        }
        stage('Init') {
            steps {
                sh 'terraform init -input=false'
                  }
        }
 //      stage('Create workspace') {
 //           steps {
 //               //sh 'terraform init -input=false'
 //               //sh 'terraform workspace new ${environment}'
 //               sh 'pwd; terraform workspace select ${environment}'
 //           }
 //       }
        stage('Plan') {
            steps {
                //sh 'terraform init -input=false'
                //sh 'terraform workspace new ${environment}'
                //sh 'pwd; terraform workspace select ${environment}'
                sh "pwd; terraform plan -input=false -out tfplan"
                sh "pwd; terraform show -no-color tfplan > tfplan.txt"
            }
        }
        stage('Approval') {
           when {
               not {
                   equals expected: true, actual: params.autoApprove
               }
           }

           steps {
               script {
                    def plan = readFile 'tfplan.txt'
                    input message: "Do you want to apply the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
               }
           }
       }

        stage('Apply/destroy') {
            steps {
                sh "pwd; terraform apply -input=false tfplan"
                //sh "pwd; terraform destroy -auto-approve"
            }
        }
        stage('S3Copy step') {
           steps {
               s3Upload consoleLogLevel: 'INFO', dontSetBuildResultOnFailure: false, dontWaitForConcurrentBuildCompletion: false, entries: [[bucket: 'dips33dev', excludedFile: 'Jenkinsfile', flatten: false, gzipFiles: false, keepForever: false, managedArtifacts: false, noUploadOnFailure: false, selectedRegion: 'us-east-1', showDirectlyInBrowser: false, sourceFile: '*/', storageClass: 'STANDARD', uploadFromSlave: true, useServerSideEncryption: false]], pluginFailureResultConstraint: 'FAILURE', profileName: 'Jenkins', userMetadata: [] 
               cleanWs()
     }
    }
 stage('Notification on Slack Finish') {
            steps {
                slackSend channel: '#testforevgen', message: 'Job Finish', blocks: [
                    [
                      "type": "section",
                      "text": [
                        "type": "mrkdwn",
                        "text": "*Инфраструктура создана*"
                      ]
                    ],
                    [
                      "type": "section",
                      "text": [
                        "type": "mrkdwn",
                        "text": "Запуск Load Balancer, Target Group, create Launch Template and ASG"
                      ] 
                     ]
                    ]
               }
             }
   }
  }
